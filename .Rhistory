ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases,frame = dateRep, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases,frame = dateRep, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1, frame = dateRep ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases,frame = dateRep, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1, frame = dateRep ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red")
ggplotly(death_rate_sct)}
df <- data.frame(
x = c(1,2,3,4),
y = c(1,2,3,4),
f = c(1,2,3,4)
)
p <- ggplot(df, aes(x, y, frame = f)) +
geom_point()
p <- ggplotly(p)
p
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep)+#, label = countriesAndTerritories, color = (deaths_per_100k))) +
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep)+#, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1 )) #+
#xlab("Caseas/100k") + ylab("Death % of cases") +
#geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
#scale_x_continuous(trans='log10') +
#scale_color_gradient(low="blue", high="red")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep))+#, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1 ) #+
#xlab("Caseas/100k") + ylab("Death % of cases") +
#geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
#scale_x_continuous(trans='log10') +
#scale_color_gradient(low="blue", high="red")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases))+#, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1, frame = dateRep ) #+
#xlab("Caseas/100k") + ylab("Death % of cases") +
#geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
#scale_x_continuous(trans='log10') +
#scale_color_gradient(low="blue", high="red")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases))+#, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1, aes(frame = dateRep) ) #+
#xlab("Caseas/100k") + ylab("Death % of cases") +
#geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
#scale_x_continuous(trans='log10') +
#scale_color_gradient(low="blue", high="red")
ggplotly(death_rate_sct)}
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + heme(legend. position = "none")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + heme(legend.position = "none")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = (deaths_per_100k))) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
gganimate(death_rate_sct)
installinstall.packages(rollify)
install.packages(rollify)
install.packages("rollify")
View(new_cases_country_plot)
install.packages("tibbletime")
?rollify
library("tibbletime")
?rollify
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/rollify(exp_est(exp_est, window = 7))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets","countrycode","gganimate","tibbletime")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
library("countrycode")
library("tibbletime")
poly_est <- function(data){
model <- lm(cumulative_cases ~ poly(index, 4, raw = TRUE), data=country_data)
future <- data.frame(index = tail(data$index,1))
}
exp_est <- function(data){
tryCatch({
exp  <- lm(log(cumulative_cases) ~ index, data=data)
exp$coefficients[["index"]]
}, error = function(e){return(NaN)})
}
theme_set(
theme_minimal() +
theme(legend.position = "right")
)
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
mutate("real_cases" = (lag(cumulative_deaths,10)/0.01)*2^(10/5)) %>%
mutate("continent" = countrycode(sourcevar = countriesAndTerritories,
origin = "country.name",
destination = "continent"))%>%
ungroup()
data %>% relocate(continent, .before = "countriesAndTerritories")
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/rollify(exp_est(exp_est, window = 7))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
data$doubling_time <- NA
#for (i in data$index){
#  data$doubling_time[i] = log(2)/exp_est(slice(data,max(i-7,0):min(i,length(data))))
#}
#Todays data
data_today <- filter(data, dateRep == (Sys.Date()-1)  & cumulative_cases >10)
#Change country data
country <-  c("Finland")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
countries_data <- filter(data, countriesAndTerritories %in% countries)
europe <- filter(data, continent == "Europe")
### Plot the new cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cases)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
theme_minimal() +
xlab("Date") + ylab("New cases / day")
ggplotly(new_cases_country_plot)}
###
### Plot the cumulative cases of the country
{cum_cases_country_plot <- ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cumulative_cases, group=1)) +
geom_line(linetype = "dashed")+
geom_text(aes(label=cases), position = position_nudge(y = 0.7), size=3.5) +
geom_point(size = 1)
ggplotly(cum_cases_country_plot)}
###
### Polynomial fitting
{poly_model <- lm(cumulative_cases ~ poly(index, 4), data=country_data)
#summary(poly_model)
future <- data.frame(index = tail(country_data$index,1)+c(-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7))
poly_model_fit <- predict(poly_model, future, se.fit = TRUE)
future$predictions <- poly_model_fit$fit
future$lwr <- poly_model_fit$fit-1.99*poly_model_fit$se.fit
future$upr <- poly_model_fit$fit+1.99*poly_model_fit$se.fit
#Plot the fit
polynomfit_plot <- ggplot(country_data, aes(index,cumulative_cases))+
geom_point(size=0.7) +
geom_line() +
geom_point(data=future, aes(index, predictions, col="red"), size=0.7)+
geom_line(data=future, aes(index, predictions, col="red")) +
xlab("Indices") + ylab("Cumulative Cases") +
geom_ribbon(data=future, aes(x=index, y=predictions,  ymin=lwr, ymax=upr), alpha = 0.3, inherit.aes = FALSE)
ggplotly(polynomfit_plot)}
###
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = deaths_per_100k)) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
###
###Death rate for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_deaths'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)}
### Scatter plot of doubling time !!!DOES NOT WORK ATM!!!
{doubling_sct <- ggplot(data_today, aes(cases_per_100k, doubling_time, label = countriesAndTerritories, color = (doubling_time))) +
geom_point(size=1) +
xlab("Caseas/100k") + ylab("Doubling time in days") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') #+ scale_y_continuous(trans='log10') +
#scale_color_gradient(low="blue", high="red")
ggplotly(doubling_sct)}
###
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
roll_exp_est= rollify(exp_est, window = 7)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets","countrycode","gganimate","tibbletime")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
library("countrycode")
library("tibbletime")
poly_est <- function(data){
model <- lm(cumulative_cases ~ poly(index, 4, raw = TRUE), data=country_data)
future <- data.frame(index = tail(data$index,1))
}
exp_est <- function(data){
tryCatch({
exp  <- lm(log(cumulative_cases) ~ index, data=data)
exp$coefficients[["index"]]
}, error = function(e){return(NaN)})
}
theme_set(
theme_minimal() +
theme(legend.position = "right")
)
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
mutate("real_cases" = (lag(cumulative_deaths,10)/0.01)*2^(10/5)) %>%
mutate("continent" = countrycode(sourcevar = countriesAndTerritories,
origin = "country.name",
destination = "continent"))%>%
ungroup()
data %>% relocate(continent, .before = "countriesAndTerritories")
roll_exp_est= rollify(exp_est, window = 7)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
roll_exp_est <- rollify(exp_est, window = 7)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
View(data)
roll_exp_est(data)
roll_exp_est(data)
exp_est <- function(data){
#tryCatch({
exp  <- lm(log(cumulative_cases) ~ index, data=data)
exp$coefficients[["index"]]
#}, error = function(e){return(NaN)})
}
roll_exp_est(data)
data %>% relocate(continent, .before = "countriesAndTerritories")
exp_est(data[117:124,])
roll_exp_est(data[117:124,])
roll_exp_est <- rollify(exp_est, window = 10)
roll_exp_est(data[117:124,])
roll_exp_est(data[117:134,])
roll_exp_est <- rollify(exp_est, window = 7)
roll_exp_est(data[117:134,])
roll_exp_est <- rollify(exp_est, window = 7)
roll_exp_est(data[117:124,])
data[117:124,]
str(data[117:124,])
roll_exp_est(data)
View(data)
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets","countrycode","gganimate","tibbletime")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
library("countrycode")
library("tibbletime")
poly_est <- function(data){
model <- lm(cumulative_cases ~ poly(index, 4, raw = TRUE), data=country_data)
future <- data.frame(index = tail(data$index,1))
}
exp_est <- function(data){
#tryCatch({
exp  <- lm(log(cumulative_cases) ~ index, data=data)
exp$coefficients[["index"]]
#}, error = function(e){return(NaN)})
}
theme_set(
theme_minimal() +
theme(legend.position = "right")
)
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
mutate("real_cases" = (lag(cumulative_deaths,10)/0.01)*2^(10/5)) %>%
mutate("continent" = countrycode(sourcevar = countriesAndTerritories,
origin = "country.name",
destination = "continent"))%>%
ungroup()
#data %>% relocate(continent, .before = "countriesAndTerritories")
roll_exp_est <- rollify(exp_est, window = 7)
roll_exp_est(data)
lm(log(cumulative_cases) ~ index, data=data)
#tryCatch({
exp  <- lm(log(cumulative_cases) ~ index, data=data[117:124,])
lm(log(cumulative_cases) ~ index, data=data[117:124,])
roll_exp_est(data[117:124,])
exp_est(data[117:124,])
roll_exp_est(data)
roll_exp_est(data)
roll_exp_est(data)
#Change country data
country <-  c("Finland")
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
View(country_data)
country_data <- country_data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(country_data))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
country_data <- country_data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(country_data))) %>%
#mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
country_data <- country_data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(country_data))) %>%
#mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
country_data[7]
lm(log(10,100,100) ~ c(1,2,3))
lm(log(c(10,100,100)) ~ c(1,2,3))
lm(log(c(10,100,100)) ~ c(10,20,30))
lm(log(c(10,100,100)) ~ c(10,11,12))
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data$cumulative_cases))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data$cumulative_cases))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
data$cumulative_cases[117:124]
exp_est(data$cumulative_cases[117:124])
test <- data$cumulative_cases[117:124]
exp_est(data$cumulative_cases[117:124])
exp_est <- function(data){
#tryCatch({
exp  <- lm(log(data) ~ (1:length(test)))
exp$coefficients[["index"]]
#}, error = function(e){return(NaN)})
}
exp_est(data$cumulative_cases[117:124])
1:length(test)
exp_est <- function(data){
#tryCatch({
exp  <- lm(log(data) ~ (1:length(data)))
exp$coefficients[["index"]]
#}, error = function(e){return(NaN)})
}
exp_est(data$cumulative_cases[117:124])
exp_est <- function(y){
#tryCatch({
exp  <- lm(log(y) ~ (1:length(y)))
exp$coefficients[["index"]]
#}, error = function(e){return(NaN)})
}
debug(exp_est)
exp_est <- function(y){
#tryCatch({
exp  <- lm(log(y) ~ (1:length(y)))
exp$coefficients[["index"]]
#}, error = function(e){return(NaN)})
}
exp_est(data$cumulative_cases[117:124])
debug(exp_est)
exp_est(data$cumulative_cases[117:124])
log(y)
1:length(y)
lm(log(data$cumulative_cases[117:124]) ~(1:length(data$cumulative_cases[117:124])))
data$cumulative_cases[117:124]
lm(log(data$cumulative_cases[117:124]) ~(1:length(data$cumulative_cases[117:124]-1)))
1:length(data$cumulative_cases[117:124]-1
)
lm(log(data$cumulative_cases[117:124]) ~(1:(length(data$cumulative_cases[117:124]-1))))
1:(length(data$cumulative_cases[117:124]-1))
1:(length(data$cumulative_cases[117:124])-1)
lm(log(data$cumulative_cases[117:124]) ~(1:(length(data$cumulative_cases[117:124])-1)))
debug(exp_est)
exp_est(data$cumulative_cases[117:124])
exp_est <- function(y){
#tryCatch({
x <- 1:length(y)
exp  <- lm(log(y) ~ x)
exp$coefficients[["index"]]
#}, error = function(e){return(NaN)})
}
debug(exp_est)
exp_est(data$cumulative_cases[117:124])
exp_est(data$cumulative_cases[117:124])
exp$coefficients
exp_est <- function(y){
#tryCatch({
x <- 1:length(y)
exp  <- lm(log(y) ~ x)
exp$coefficients[["x"]]
#}, error = function(e){return(NaN)})
}
debug(exp_est)
exp_est(data$cumulative_cases[117:124])
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data$cumulative_cases))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
debug(roll_exp_est)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data$cumulative_cases))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
data$cumulative_cases
debug(roll_exp_est)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data$cumulative_cases))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
class(data$cumulative_cases)
as.Vector(data$cumulative_cases))
as.Vector(data$cumulative_cases)
as.vector(data$cumulative_cases)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(as.vector(data$cumulative_cases)))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
roll_exp_est <- rollify(exp_est)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data$cumulative_cases))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(data$cumulative_cases))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
