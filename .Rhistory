}
{ for (i length(a)){a[i]=0}
a[0]=1
a[1]=0.487805
a[23]=0.134258
a[24]=0.275229
a[25]=0.134258
}
{ for (i in length(a)){a[i]=0}
a[0]=1
a[1]=0.487805
a[23]=0.134258
a[24]=0.275229
a[25]=0.134258
}
barplot(a)
length(a)
{ for (i in 1:101){a[i]=0}
a[0]=1
a[1]=0.487805
a[23]=0.134258
a[24]=0.275229
a[25]=0.134258
}
barplot(a)
barplot(a,ylim=1)
barplot(a,ylim=c(0,1))
a[26]=0.134258
{ for (i in 1:101){a[i]=0}
a[1]=1
a[2]=0.487805
a[24]=0.134258
a[25]=0.275229
a[26]=0.134258
}
barplot(a,ylim=c(0,1))
rm(list = ls())
#install.packages(c("tseries","forecast","devtools"))
library("tseries");library("forecast");library("devtools") #;devtools::install_github("username/packagename")
theta1=0.8
theta24= 0.3
theta25= theta1*theta24
fii24= 0.5
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = c(rep(0, 23), fii24)
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
a=akf
{ for (i in 1:101){a[i]=0}
a[1]=1
a[2]=0.487805
a[24]=0.134258
a[25]=0.275229
a[26]=0.134258
}
barplot(a,ylim=c(0,1))
ar_ = 0 #c(rep(0, 23), fii24)
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
a=akf
{ for (i in 1:101){a[i]=0}
a[1]=1
a[2]=0.487805
a[24]=0.134258
a[25]=0.275229
a[26]=0.134258
}
barplot(a,ylim=c(0,1))
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = 0
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
a=akf
{ for (i in 1:101){a[i]=0}
a[1]=1
a[2]=0.487805
a[24]=0.134258
a[25]=0.275229
a[26]=0.134258
}
barplot(a,ylim=c(0,1))
#ii)
ma_ = c(theta1, rep(0, 22), theta24, theta25)
barplot(akf)
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = c(rep(0, 23), fii24)
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
akf[nonzero]
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = 0
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = 0
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = c(rep(0, 23), fii24)
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
mpi.spawn.Rslaves(Rscript=system.file("slavedaemon.R", package="Rmpi"),
nslaves=mpi.universe.size(), root = 0, intercomm = 2,
comm = 1, hosts = NULL, needlog = TRUE, mapdrive=TRUE, quiet = FALSE,
nonblock=TRUE, sleep=0.1)
library(Rmpi)
mpi.spawn.Rslaves(Rscript=system.file("slavedaemon.R", package="Rmpi"),
nslaves=mpi.universe.size(), root = 0, intercomm = 2,
comm = 1, hosts = NULL, needlog = TRUE, mapdrive=TRUE, quiet = FALSE,
nonblock=TRUE, sleep=0.1)
library(doSNOW)
library(foreach)
library(Rmpi)
system.time({cl<-makeCluster(3) #change the 4 to your number of CPU cores
registerDoSNOW(cl)
p.i <- 1
q.i <- 1
P.i <- 1
Q.i <- 1
i <- 0
akaik <<- matrix(0L, nrow = 3, ncol = (length(0:p.i)*length(0:q.i)+length(0:P.i)+length(0:Q.i)))
foreach(p = 0:p.i) %dopar%{
foreach(q = 0:q.i)%dopar%{
foreach(P = 0:P.i)%dopar%{
foreach(Q = 0:Q.i)%dopar%{
tryCatch({
malli = arima(ele,
order = c(p,d,q),
seasonal = list(order = c(P, D, Q),period = S),
method = "ML")
#enne = predict(malli, n.ahead = 24)
# Estimoidaan malli lämpötilan kanssa. Määrää lämpötilan mahdollinen viive L.
L = 1 #14?
tempestimointi = eletemp$Celcius[1:(816-L)]
tempennuste = eletemp$Celcius[(816-L+1):(816-L+24)]
eleestimointi = ts(eletemp$kWh[(1+L):816], start = 1, frequency = 24)
malli2 = arima(eleestimointi,
order = c(p,d,q),
seasonal = list(order = c(P, D, Q), period = S),
xreg = tempestimointi,
method = "ML")
#enne2 = predict(malli2,
#                n.ahead = 24,
#                newxreg = tempennuste)
akaik[1,i] <- paste("ARIMA(",p,",",d,",",q,")(",P,",",D,",",Q,")[",S,"]", sep= " ")
akaik[2,i] <- malli$aic
akaik[3,i] <- malli2$aic
print(paste("ARIMA(",p,",",d,",",q,")(",P,",",D,",",Q,")[",S,"] in index",i, sep= " "))
i <- i+1
return(ret)
},error = function(e) NULL)
}
}
}
}
stopCluster(cl)})
library(doSNOW)
library(foreach)
library(doParallel)
system.time({cl<-makeCluster(3) #change the 4 to your number of CPU cores
registerDoSNOW(cl)
registerDoParallel(cl)
p.i <- 1
q.i <- 1
P.i <- 1
Q.i <- 1
i <- 0
akaik <<- matrix(0L, nrow = 3, ncol = (length(0:p.i)*length(0:q.i)+length(0:P.i)+length(0:Q.i)))
foreach(p = 0:p.i) %dopar%{
foreach(q = 0:q.i)%dopar%{
foreach(P = 0:P.i)%dopar%{
foreach(Q = 0:Q.i)%dopar%{
tryCatch({
malli = arima(ele,
order = c(p,d,q),
seasonal = list(order = c(P, D, Q),period = S),
method = "ML")
#enne = predict(malli, n.ahead = 24)
# Estimoidaan malli lämpötilan kanssa. Määrää lämpötilan mahdollinen viive L.
L = 1 #14?
tempestimointi = eletemp$Celcius[1:(816-L)]
tempennuste = eletemp$Celcius[(816-L+1):(816-L+24)]
eleestimointi = ts(eletemp$kWh[(1+L):816], start = 1, frequency = 24)
malli2 = arima(eleestimointi,
order = c(p,d,q),
seasonal = list(order = c(P, D, Q), period = S),
xreg = tempestimointi,
method = "ML")
#enne2 = predict(malli2,
#                n.ahead = 24,
#                newxreg = tempennuste)
i <- p*8+q*4+P*2+Q*1
akaik[1,i] <- paste("ARIMA(",p,",",d,",",q,")(",P,",",D,",",Q,")[",S,"]", sep= " ")
akaik[2,i] <- malli$aic
akaik[3,i] <- malli2$aic
print(paste("ARIMA(",p,",",d,",",q,")(",P,",",D,",",Q,")[",S,"] in index",i, sep= " "))
return(ret)
},error = function(e) NULL)
}
}
}
}
stopCluster(cl)})
install.packages("gdata","readxl")
library("gdata")
library("readxl")
library("readxl")
library(utils)
library(utils)
install.packages("gdata","readxl")
install.packages("gdata", "readxl")
library("readxl")
library("readxl")
rnorm(10,1.79,0.07)
miehet = rnorm(20000,1.79,0.07)
plot(miehet)
hist(miehet)
naiset = rnorm(20000,1.65,0.06)
hist(naiset)
write.csv(miehet,"D:\Users\Christian Segercrant\Desktop\\miehet.csv", row.names = FALSE)
df <- data.frame(Column1 = 1:miehet.size,
Column2 = miehet)
df <- data.frame(Column1 = 1:miehet.length,
Column2 = miehet)
df <- data.frame(Column1 = 1:20000,
Column2 = miehet)
write.csv(df,"D:\Users\Christian Segercrant\Desktop\\miehet.csv", row.names = FALSE)
write.csv(df,"D:\Users\Christian Segercrant\Desktop\miehet.csv", row.names = FALSE)
write.csv(df,"D:\\Users\\Christian Segercrant\\Desktop\\miehet.csv", row.names = FALSE)
df <- data.frame(Column1 = 1:20000,
Column2 = naiset)
write.csv(df,"D:\\Users\\Christian Segercrant\\Desktop\\naiset.csv", row.names = FALSE)
install.packages("installr")
library(installr)
updateR()
install.packages("rollify")
install.packages(c("isoband", "reshape2", "stringi", "xfun"))
install.packages("tibbletime")
library("rollify")
library(rollify)
install.packages("rcpproll")
install.packages("RcppRoll")
?RcppRoll
library(RcppRoll)
?RcppRoll
suppressWarnings(install.packages("rollify"))
install.packages("rollify")
?purrr
??purrr
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets","countrycode","gganimate","tibbletime")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
library("countrycode")
library("tibbletime")
poly_est <- function(data){
model <- lm(cumulative_cases ~ poly(index, 4, raw = TRUE), data=country_data)
future <- data.frame(index = tail(data$index,1))
}
exp_est <- function(y){
tryCatch({
x <- 1:length(y)
exp  <- lm(log(y) ~ x)
exp$coefficients[["x"]]
}, error = function(e){return(NaN)})
}
theme_set(
theme_minimal() +
theme(legend.position = "right")
)
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
filter(n()>7) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
mutate("real_cases" = (lag(cumulative_deaths,10)/0.01)*2^(10/5)) %>%
mutate("continent" = countrycode(sourcevar = countriesAndTerritories,
origin = "country.name",
destination = "continent"))%>%
ungroup()
#data %>% relocate(continent, .before = "countriesAndTerritories")
roll_exp_est <- rollify(exp_est, window= 7, unlist = TRUE)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(cumulative_cases))) %>%
mutate("real_cases" = cumsum(real_cases)) %>%
ungroup()
#data$doubling_time <- NA
#for (i in data$index){
#  data$doubling_time[i] = log(2)/exp_est(slice(data,max(i-7,0):min(i,length(data))))
#}
#Todays data
data_today <- filter(data, dateRep == (Sys.Date()-1)  & cumulative_cases >10)
#Change country data
country <-  c("Finland")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
countries_data <- filter(data, countriesAndTerritories %in% countries)
europe <- filter(data, continent == "Europe")
### Plot the new cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cases)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
theme_minimal() +
xlab("Date") + ylab("New cases / day")
ggplotly(new_cases_country_plot)}
###
### Plot the cumulative cases of the country
{cum_cases_country_plot <- ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cumulative_cases, group=1)) +
geom_line(linetype = "dashed")+
geom_text(aes(label=cases), position = position_nudge(y = 0.7), size=3.5) +
geom_point(size = 1)
ggplotly(cum_cases_country_plot)}
###
### Polynomial fitting
{poly_model <- lm(cumulative_cases ~ poly(index, 4), data=country_data)
#summary(poly_model)
future <- data.frame(index = tail(country_data$index,1)+c(-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7))
poly_model_fit <- predict(poly_model, future, se.fit = TRUE)
future$predictions <- poly_model_fit$fit
future$lwr <- poly_model_fit$fit-1.99*poly_model_fit$se.fit
future$upr <- poly_model_fit$fit+1.99*poly_model_fit$se.fit
#Plot the fit
polynomfit_plot <- ggplot(country_data, aes(index,cumulative_cases))+
geom_point(size=0.7) +
geom_line() +
geom_point(data=future, aes(index, predictions, col="red"), size=0.7)+
geom_line(data=future, aes(index, predictions, col="red")) +
xlab("Indices") + ylab("Cumulative Cases") +
geom_ribbon(data=future, aes(x=index, y=predictions,  ymin=lwr, ymax=upr), alpha = 0.3, inherit.aes = FALSE)
ggplotly(polynomfit_plot)}
###
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = deaths_per_100k)) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
###
###Death rate for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_deaths'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)}
###Doubling rate for specified countries
{doubling_rate <-
ggplot(countries_data[which(countries_data$doubling_time < 100),], aes(dateRep, doubling_time, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Doubling speed [Days]")
ggplotly(doubling_rate)}
#scale_color_gradient(low="blue", high="red")
ggplotly(doubling_sct)}
### Scatter plot of doubling time
{doubling_sct <- ggplot(data[which(!is.infinite(data$doubling_time)) & data$doubling_time < 100,], aes(cumulative_cases, doubling_time, frame=index, label = countriesAndTerritories, color = -doubling_time)) +
geom_point(size=1) +
xlab("Caseas/100k") + ylab("Doubling time in days") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.05)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') #+
#scale_color_gradient(low="blue", high="red")
ggplotly(doubling_sct)}
### Scatter plot of doubling time
{doubling_sct <- ggplot(data[which(!is.infinite(data$doubling_time)) & data$doubling_time < 100,], aes(cumulative_cases, doubling_time, frame=dateRep, label = countriesAndTerritories, color = -doubling_time)) +
geom_point(size=1) +
xlab("Caseas/100k") + ylab("Doubling time in days") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.05)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') #+
#scale_color_gradient(low="blue", high="red")
ggplotly(doubling_sct)}
### Scatter plot of doubling time
{doubling_sct <- ggplot(europe[which(!is.infinite(europe$doubling_time)) & europe$doubling_time < 100,], aes(cumulative_cases, doubling_time, frame=dateRep, label = countriesAndTerritories, color = -doubling_time)) +
geom_point(size=1) +
xlab("Caseas/100k") + ylab("Doubling time in days") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.05)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') #+
#scale_color_gradient(low="blue", high="red")
ggplotly(doubling_sct)}
### Scatter plot of doubling time
{doubling_sct <- ggplot(countries_data[which(!is.infinite(countries_data$doubling_time)) & countries_data$doubling_time < 100,], aes(cumulative_cases, doubling_time, frame=dateRep, label = countriesAndTerritories, color = -doubling_time)) +
geom_point(size=1) +
xlab("Caseas/100k") + ylab("Doubling time in days") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.05)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') #+
#scale_color_gradient(low="blue", high="red")
ggplotly(doubling_sct)}
doubling_sct
### Scatter plot of doubling time
{doubling_sct <- ggplot(countries_data[which(!is.infinite(countries_data$doubling_time)) & countries_data$doubling_time < 100,], aes(cumulative_cases, doubling_time, frame=paste(year,month,day), label = countriesAndTerritories, color = -doubling_time)) +
geom_point(size=1) +
xlab("Caseas/100k") + ylab("Doubling time in days") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.05)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') #+
#scale_color_gradient(low="blue", high="red")
ggplotly(doubling_sct)}
###Doubling rate for specified countries
{doubling_rate <-
ggplot(countries_data[which(countries_data$doubling_time < 100),], aes(dateRep, doubling_time, frame=paste(year,month,day), group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Doubling speed [Days]")
ggplotly(doubling_rate)}
###Doubling rate for specified countries
{doubling_rate <-
ggplot(countries_data[which(countries_data$doubling_time < 100),], aes(dateRep, doubling_time, frame=dateRep, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Doubling speed [Days]")
ggplotly(doubling_rate)}
###Doubling rate for specified countries
{doubling_rate <-
ggplot(countries_data[which(countries_data$doubling_time < 100),], aes(dateRep, doubling_time, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Doubling speed [Days]")
ggplotly(doubling_rate)}
### Scatter plot of doubling time
{doubling_sct <- ggplot(data[which(!is.infinite(data$doubling_time)) & data$doubling_time < 100,], aes(cumulative_cases, doubling_time, label = countriesAndTerritories, color = -doubling_time)) +
geom_point(size=1) +
xlab("Caseas/100k") + ylab("Doubling time in days") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.05)) +
scale_x_continuous(trans='log10') + scale_y_continuous(trans='log10') #+
#scale_color_gradient(low="blue", high="red")
ggplotly(doubling_sct)}
###Death rate for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_deaths'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = deaths_per_100k)) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
### Polynomial fitting
{poly_model <- lm(cumulative_cases ~ poly(index, 4), data=country_data)
#summary(poly_model)
future <- data.frame(index = tail(country_data$index,1)+c(-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7))
poly_model_fit <- predict(poly_model, future, se.fit = TRUE)
future$predictions <- poly_model_fit$fit
future$lwr <- poly_model_fit$fit-1.99*poly_model_fit$se.fit
future$upr <- poly_model_fit$fit+1.99*poly_model_fit$se.fit
#Plot the fit
polynomfit_plot <- ggplot(country_data, aes(index,cumulative_cases))+
geom_point(size=0.7) +
geom_line() +
geom_point(data=future, aes(index, predictions, col="red"), size=0.7)+
geom_line(data=future, aes(index, predictions, col="red")) +
xlab("Indices") + ylab("Cumulative Cases") +
geom_ribbon(data=future, aes(x=index, y=predictions,  ymin=lwr, ymax=upr), alpha = 0.3, inherit.aes = FALSE)
ggplotly(polynomfit_plot)}
###
### Polynomial fitting
{poly_model <- lm(cumulative_cases ~ poly(index, 4), data=country_data)
#summary(poly_model)
future <- data.frame(index = tail(country_data$index,1)+c(0,1,2,3,4,5,6,7))
poly_model_fit <- predict(poly_model, future, se.fit = TRUE)
future$predictions <- poly_model_fit$fit
future$lwr <- poly_model_fit$fit-1.99*poly_model_fit$se.fit
future$upr <- poly_model_fit$fit+1.99*poly_model_fit$se.fit
#Plot the fit
polynomfit_plot <- ggplot(country_data, aes(index,cumulative_cases))+
geom_point(size=0.7) +
geom_line() +
geom_point(data=future, aes(index, predictions, col="red"), size=0.7)+
geom_line(data=future, aes(index, predictions, col="red")) +
xlab("Indices") + ylab("Cumulative Cases") +
geom_ribbon(data=future, aes(x=index, y=predictions,  ymin=lwr, ymax=upr), alpha = 0.3, inherit.aes = FALSE)
ggplotly(polynomfit_plot)}
?relocate
?tidyverse
install.packages("relocate")
library("tidyverse")
install.packages("remotes")
library("remotes")
data %>% relocate(continent, .before = "countriesAndTerritories")
