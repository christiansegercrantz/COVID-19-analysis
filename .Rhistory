}
barplot(a,ylim=c(0,1))
rm(list = ls())
#install.packages(c("tseries","forecast","devtools"))
library("tseries");library("forecast");library("devtools") #;devtools::install_github("username/packagename")
theta1=0.8
theta24= 0.3
theta25= theta1*theta24
fii24= 0.5
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = c(rep(0, 23), fii24)
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
a=akf
{ for (i in 1:101){a[i]=0}
a[1]=1
a[2]=0.487805
a[24]=0.134258
a[25]=0.275229
a[26]=0.134258
}
barplot(a,ylim=c(0,1))
ar_ = 0 #c(rep(0, 23), fii24)
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
a=akf
{ for (i in 1:101){a[i]=0}
a[1]=1
a[2]=0.487805
a[24]=0.134258
a[25]=0.275229
a[26]=0.134258
}
barplot(a,ylim=c(0,1))
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = 0
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
a=akf
{ for (i in 1:101){a[i]=0}
a[1]=1
a[2]=0.487805
a[24]=0.134258
a[25]=0.275229
a[26]=0.134258
}
barplot(a,ylim=c(0,1))
#ii)
ma_ = c(theta1, rep(0, 22), theta24, theta25)
barplot(akf)
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = c(rep(0, 23), fii24)
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
akf[nonzero]
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = 0
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = 0
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
ma_ = c(theta1, rep(0, 22), theta24, theta25)
ar_ = c(rep(0, 23), fii24)
akf = ARMAacf(ar = ar_, ma = ma_, lag.max = 100)
nonzero = which(akf>0)
akf[nonzero]
barplot(akf)
mpi.spawn.Rslaves(Rscript=system.file("slavedaemon.R", package="Rmpi"),
nslaves=mpi.universe.size(), root = 0, intercomm = 2,
comm = 1, hosts = NULL, needlog = TRUE, mapdrive=TRUE, quiet = FALSE,
nonblock=TRUE, sleep=0.1)
library(Rmpi)
mpi.spawn.Rslaves(Rscript=system.file("slavedaemon.R", package="Rmpi"),
nslaves=mpi.universe.size(), root = 0, intercomm = 2,
comm = 1, hosts = NULL, needlog = TRUE, mapdrive=TRUE, quiet = FALSE,
nonblock=TRUE, sleep=0.1)
library(doSNOW)
library(foreach)
library(Rmpi)
system.time({cl<-makeCluster(3) #change the 4 to your number of CPU cores
registerDoSNOW(cl)
p.i <- 1
q.i <- 1
P.i <- 1
Q.i <- 1
i <- 0
akaik <<- matrix(0L, nrow = 3, ncol = (length(0:p.i)*length(0:q.i)+length(0:P.i)+length(0:Q.i)))
foreach(p = 0:p.i) %dopar%{
foreach(q = 0:q.i)%dopar%{
foreach(P = 0:P.i)%dopar%{
foreach(Q = 0:Q.i)%dopar%{
tryCatch({
malli = arima(ele,
order = c(p,d,q),
seasonal = list(order = c(P, D, Q),period = S),
method = "ML")
#enne = predict(malli, n.ahead = 24)
# Estimoidaan malli lämpötilan kanssa. Määrää lämpötilan mahdollinen viive L.
L = 1 #14?
tempestimointi = eletemp$Celcius[1:(816-L)]
tempennuste = eletemp$Celcius[(816-L+1):(816-L+24)]
eleestimointi = ts(eletemp$kWh[(1+L):816], start = 1, frequency = 24)
malli2 = arima(eleestimointi,
order = c(p,d,q),
seasonal = list(order = c(P, D, Q), period = S),
xreg = tempestimointi,
method = "ML")
#enne2 = predict(malli2,
#                n.ahead = 24,
#                newxreg = tempennuste)
akaik[1,i] <- paste("ARIMA(",p,",",d,",",q,")(",P,",",D,",",Q,")[",S,"]", sep= " ")
akaik[2,i] <- malli$aic
akaik[3,i] <- malli2$aic
print(paste("ARIMA(",p,",",d,",",q,")(",P,",",D,",",Q,")[",S,"] in index",i, sep= " "))
i <- i+1
return(ret)
},error = function(e) NULL)
}
}
}
}
stopCluster(cl)})
library(doSNOW)
library(foreach)
library(doParallel)
system.time({cl<-makeCluster(3) #change the 4 to your number of CPU cores
registerDoSNOW(cl)
registerDoParallel(cl)
p.i <- 1
q.i <- 1
P.i <- 1
Q.i <- 1
i <- 0
akaik <<- matrix(0L, nrow = 3, ncol = (length(0:p.i)*length(0:q.i)+length(0:P.i)+length(0:Q.i)))
foreach(p = 0:p.i) %dopar%{
foreach(q = 0:q.i)%dopar%{
foreach(P = 0:P.i)%dopar%{
foreach(Q = 0:Q.i)%dopar%{
tryCatch({
malli = arima(ele,
order = c(p,d,q),
seasonal = list(order = c(P, D, Q),period = S),
method = "ML")
#enne = predict(malli, n.ahead = 24)
# Estimoidaan malli lämpötilan kanssa. Määrää lämpötilan mahdollinen viive L.
L = 1 #14?
tempestimointi = eletemp$Celcius[1:(816-L)]
tempennuste = eletemp$Celcius[(816-L+1):(816-L+24)]
eleestimointi = ts(eletemp$kWh[(1+L):816], start = 1, frequency = 24)
malli2 = arima(eleestimointi,
order = c(p,d,q),
seasonal = list(order = c(P, D, Q), period = S),
xreg = tempestimointi,
method = "ML")
#enne2 = predict(malli2,
#                n.ahead = 24,
#                newxreg = tempennuste)
i <- p*8+q*4+P*2+Q*1
akaik[1,i] <- paste("ARIMA(",p,",",d,",",q,")(",P,",",D,",",Q,")[",S,"]", sep= " ")
akaik[2,i] <- malli$aic
akaik[3,i] <- malli2$aic
print(paste("ARIMA(",p,",",d,",",q,")(",P,",",D,",",Q,")[",S,"] in index",i, sep= " "))
return(ret)
},error = function(e) NULL)
}
}
}
}
stopCluster(cl)})
install.packages("gdata","readxl")
library("gdata")
library("readxl")
library("readxl")
library(utils)
library(utils)
install.packages("gdata","readxl")
install.packages("gdata", "readxl")
library("readxl")
library("readxl")
rnorm(10,1.79,0.07)
miehet = rnorm(20000,1.79,0.07)
plot(miehet)
hist(miehet)
naiset = rnorm(20000,1.65,0.06)
hist(naiset)
write.csv(miehet,"D:\Users\Christian Segercrant\Desktop\\miehet.csv", row.names = FALSE)
df <- data.frame(Column1 = 1:miehet.size,
Column2 = miehet)
df <- data.frame(Column1 = 1:miehet.length,
Column2 = miehet)
df <- data.frame(Column1 = 1:20000,
Column2 = miehet)
write.csv(df,"D:\Users\Christian Segercrant\Desktop\\miehet.csv", row.names = FALSE)
write.csv(df,"D:\Users\Christian Segercrant\Desktop\miehet.csv", row.names = FALSE)
write.csv(df,"D:\\Users\\Christian Segercrant\\Desktop\\miehet.csv", row.names = FALSE)
df <- data.frame(Column1 = 1:20000,
Column2 = naiset)
write.csv(df,"D:\\Users\\Christian Segercrant\\Desktop\\naiset.csv", row.names = FALSE)
install.packages("installr")
library(installr)
updateR()
install.packages("rollify")
install.packages(c("isoband", "reshape2", "stringi", "xfun"))
install.packages("tibbletime")
library("rollify")
library(rollify)
install.packages("rcpproll")
install.packages("RcppRoll")
?RcppRoll
library(RcppRoll)
?RcppRoll
suppressWarnings(install.packages("rollify"))
install.packages("rollify")
?purrr
??purrr
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
library(tidyverse)
library(jsonlite)
library(ggplot2)
library(purrr)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#Read in the material
tests_raw <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?row=dateweek2020010120201231-443686&row=hcdmunicipality2020-445222&column=measure-445356",sep=";", encoding = "UTF-8")
cases_raw <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?row=dateweek2020010120201231-443686&row=hcdmunicipality2020-445222&column=measure-444833",sep=";", encoding = "UTF-8")
genders <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?column=sex-444328",sep=";", encoding = "UTF-8")
tests_raw <- tests_raw %>%
mutate("id" = paste(Time, Area, sep = " "))
cases_raw <- cases_raw %>%
mutate("id" = paste(Time, Area, sep = " "))
data <- inner_join(tests_raw, cases_raw, by="id") %>%
select(-ends_with("y"),"val.y", -"id", -"Measure.x") %>%
rename(Tests = val.x) %>%
rename(Cases = val.y) %>%
rename(Time = Time.x) %>%
rename(Area = Area.x) %>%
filter(!is.na(Cases) | !is.na(Tests)) %>%
filter(Time != "Time") %>%
filter(Time != "Year 2020 Week 05")
data_all <- data %>%
filter(Area == "All areas") %>%
select(-Area) %>%
mutate("Week" = as.integer((substrRight(as.character(Time), 2))))
data_test <- data %>%
filter(!is.na(Tests))
coeff = 1/0.04
data_all.interp <- data_all %>%
map_df(~data.frame(tests = approx(data_all$Week, data_all$Tests, n = 80),
cases = approx(data_all$Week, data_all$Cases, n = 80)))
{tests_vs_cases <- ggplot(data=data_all, aes(x=Week, group = 1, ) ) +
geom_line(aes(y=Cases)) + geom_text(aes(label=Cases, y=Cases),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Cases)) +
geom_line(aes(y=Tests/coeff), col="firebrick3") + geom_text(aes(label=Tests, y=Tests/coeff),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Tests/coeff), col = "firebrick3") +
scale_y_continuous(name = "Cases",sec.axis = sec_axis( trans=~.*coeff, name="Tests")) +
geom_ribbon(data=data_all.interp, aes(x = tests.x, ymin = cases.y, ymax = pmin(cases.y, tests.y/coeff), fill = paste("Less than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
geom_ribbon(data=data_all.interp, aes(x = cases.x, ymin = tests.y/coeff, ymax = pmin(cases.y, tests.y/coeff), fill = paste("More than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
labs(fill = "Positiv test procentage") +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(data_all[,1]))) +
scale_fill_manual(values=c("firebrick3", "#009E73"), name="fill")
tests_vs_cases}
#Women
women <- prop.test(genders$val[1], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Womens are more more likely to get sick with Corona with a 95-CI:",women$p.value>0.05)
#Men
men <- prop.test(genders$val[2], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Men are more more likely to get sick with Corona with a 95-CI:",men$p.value>0.05)
#Men
men <- prop.test(genders$val[2], genders$val[3],p = 0.6, alternative = "two.sided")
paste("Men are more more likely to get sick with Corona with a 95-CI:",men$p.value>0.05)
paste("Womens are as likely to get corona as women with a 95-CI:",women$p.value>0.05)
#Men
men <- prop.test(genders$val[2], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Men are as likely to get corona as women with a 95-CI:",men$p.value>0.05)
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
library(tidyverse)
library(jsonlite)
library(ggplot2)
library(purrr)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#Read in the material
tests_raw <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?row=dateweek2020010120201231-443686&row=hcdmunicipality2020-445222&column=measure-445356",sep=";", encoding = "UTF-8")
cases_raw <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?row=dateweek2020010120201231-443686&row=hcdmunicipality2020-445222&column=measure-444833",sep=";", encoding = "UTF-8")
genders <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?column=sex-444328",sep=";", encoding = "UTF-8")
tests_raw <- tests_raw %>%
mutate("id" = paste(Time, Area, sep = " "))
cases_raw <- cases_raw %>%
mutate("id" = paste(Time, Area, sep = " "))
data <- inner_join(tests_raw, cases_raw, by="id") %>%
select(-ends_with("y"),"val.y", -"id", -"Measure.x") %>%
rename(Tests = val.x) %>%
rename(Cases = val.y) %>%
rename(Time = Time.x) %>%
rename(Area = Area.x) %>%
filter(!is.na(Cases) | !is.na(Tests)) %>%
filter(Time != "Time") %>%
filter(Time != "Year 2020 Week 05")
data_all <- data %>%
filter(Area == "All areas") %>%
select(-Area) %>%
mutate("Week" = as.integer((substrRight(as.character(Time), 2))))
data_test <- data %>%
filter(!is.na(Tests))
coeff = 1/0.04
data_all.interp <- data_all %>%
map_df(~data.frame(tests = approx(data_all$Week, data_all$Tests, n = 80),
cases = approx(data_all$Week, data_all$Cases, n = 80)))
{tests_vs_cases <- ggplot(data=data_all, aes(x=Week, group = 1, ) ) +
geom_line(aes(y=Cases)) + geom_text(aes(label=Cases, y=Cases),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Cases)) +
geom_line(aes(y=Tests/coeff), col="firebrick3") + geom_text(aes(label=Tests, y=Tests/coeff),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Tests/coeff), col = "firebrick3") +
scale_y_continuous(name = "Cases",sec.axis = sec_axis( trans=~.*coeff, name="Tests")) +
geom_ribbon(data=data_all.interp, aes(x = tests.x, ymin = cases.y, ymax = pmin(cases.y, tests.y/coeff), fill = paste("Less than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
geom_ribbon(data=data_all.interp, aes(x = cases.x, ymin = tests.y/coeff, ymax = pmin(cases.y, tests.y/coeff), fill = paste("More than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
labs(fill = "Positiv test procentage") +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(data_all[,1]))) +
scale_fill_manual(values=c("firebrick3", "#009E73"), name="fill")
tests_vs_cases}
#Women
women <- prop.test(genders$val[1], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Womens are as likely to get corona as women with a 95-CI:",women$p.value>0.05)
#Men
men <- prop.test(genders$val[2], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Men are as likely to get corona as women with a 95-CI:",men$p.value>0.05)
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
library(tidyverse)
library(jsonlite)
library(ggplot2)
library(purrr)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#Read in the material
tests_raw <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?row=dateweek2020010120201231-443686&row=hcdmunicipality2020-445222&column=measure-445356",sep=";", encoding = "UTF-8")
cases_raw <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?row=dateweek2020010120201231-443686&row=hcdmunicipality2020-445222&column=measure-444833",sep=";", encoding = "UTF-8")
genders <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?column=sex-444328",sep=";", encoding = "UTF-8")
tests_raw <- tests_raw %>%
mutate("id" = paste(Time, Area, sep = " "))
cases_raw <- cases_raw %>%
mutate("id" = paste(Time, Area, sep = " "))
data <- inner_join(tests_raw, cases_raw, by="id") %>%
select(-ends_with("y"),"val.y", -"id", -"Measure.x") %>%
rename(Tests = val.x) %>%
rename(Cases = val.y) %>%
rename(Time = Time.x) %>%
rename(Area = Area.x) %>%
filter(!is.na(Cases) | !is.na(Tests)) %>%
filter(Time != "Time") %>%
filter(Time != "Year 2020 Week 05")
data_all <- data %>%
filter(Area == "All areas") %>%
select(-Area) %>%
mutate("Week" = as.integer((substrRight(as.character(Time), 2))))
data_test <- data %>%
filter(!is.na(Tests))
coeff = 1/0.03
data_all.interp <- data_all %>%
map_df(~data.frame(tests = approx(data_all$Week, data_all$Tests, n = 80),
cases = approx(data_all$Week, data_all$Cases, n = 80)))
{tests_vs_cases <- ggplot(data=data_all, aes(x=Week, group = 1, ) ) +
geom_line(aes(y=Cases)) + geom_text(aes(label=Cases, y=Cases),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Cases)) +
geom_line(aes(y=Tests/coeff), col="firebrick3") + geom_text(aes(label=Tests, y=Tests/coeff),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Tests/coeff), col = "firebrick3") +
scale_y_continuous(name = "Cases",sec.axis = sec_axis( trans=~.*coeff, name="Tests")) +
geom_ribbon(data=data_all.interp, aes(x = tests.x, ymin = cases.y, ymax = pmin(cases.y, tests.y/coeff), fill = paste("Less than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
geom_ribbon(data=data_all.interp, aes(x = cases.x, ymin = tests.y/coeff, ymax = pmin(cases.y, tests.y/coeff), fill = paste("More than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
labs(fill = "Positiv test procentage") +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(data_all[,1]))) +
scale_fill_manual(values=c("firebrick3", "#009E73"), name="fill")
tests_vs_cases}
#Women
women <- prop.test(genders$val[1], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Womens are as likely to get corona as women with a 95-CI:",women$p.value>0.05)
#Men
men <- prop.test(genders$val[2], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Men are as likely to get corona as women with a 95-CI:",men$p.value>0.05)
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
library(tidyverse)
library(jsonlite)
library(ggplot2)
library(purrr)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
#Read in the material
tests_raw <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?row=dateweek2020010120201231-443686&row=hcdmunicipality2020-445222&column=measure-445356",sep=";", encoding = "UTF-8")
cases_raw <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?row=dateweek2020010120201231-443686&row=hcdmunicipality2020-445222&column=measure-444833",sep=";", encoding = "UTF-8")
genders <- read.csv("https://sampo.thl.fi/pivot/prod/en/epirapo/covid19case/fact_epirapo_covid19case.csv?column=sex-444328",sep=";", encoding = "UTF-8")
tests_raw <- tests_raw %>%
mutate("id" = paste(Time, Area, sep = " "))
cases_raw <- cases_raw %>%
mutate("id" = paste(Time, Area, sep = " "))
data <- inner_join(tests_raw, cases_raw, by="id") %>%
select(-ends_with("y"),"val.y", -"id", -"Measure.x") %>%
rename(Tests = val.x) %>%
rename(Cases = val.y) %>%
rename(Time = Time.x) %>%
rename(Area = Area.x) %>%
filter(!is.na(Cases) | !is.na(Tests)) %>%
filter(Time != "Time") %>%
filter(Time != "Year 2020 Week 05")
data_all <- data %>%
filter(Area == "All areas") %>%
select(-Area) %>%
mutate("Week" = as.integer((substrRight(as.character(Time), 2))))
data_test <- data %>%
filter(!is.na(Tests))
coeff = 1/0.035
data_all.interp <- data_all %>%
map_df(~data.frame(tests = approx(data_all$Week, data_all$Tests, n = 80),
cases = approx(data_all$Week, data_all$Cases, n = 80)))
{tests_vs_cases <- ggplot(data=data_all, aes(x=Week, group = 1, ) ) +
geom_line(aes(y=Cases)) + geom_text(aes(label=Cases, y=Cases),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Cases)) +
geom_line(aes(y=Tests/coeff), col="firebrick3") + geom_text(aes(label=Tests, y=Tests/coeff),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Tests/coeff), col = "firebrick3") +
scale_y_continuous(name = "Cases",sec.axis = sec_axis( trans=~.*coeff, name="Tests")) +
geom_ribbon(data=data_all.interp, aes(x = tests.x, ymin = cases.y, ymax = pmin(cases.y, tests.y/coeff), fill = paste("Less than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
geom_ribbon(data=data_all.interp, aes(x = cases.x, ymin = tests.y/coeff, ymax = pmin(cases.y, tests.y/coeff), fill = paste("More than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
labs(fill = "Positiv test procentage") +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(data_all[,1]))) +
scale_fill_manual(values=c("firebrick3", "#009E73"), name="fill")
tests_vs_cases}
#Women
women <- prop.test(genders$val[1], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Womens are as likely to get corona as women with a 95-CI:",women$p.value>0.05)
#Men
men <- prop.test(genders$val[2], genders$val[3],p = 0.5, alternative = "two.sided")
paste("Men are as likely to get corona as women with a 95-CI:",men$p.value>0.05)
View(data_all)
View(data_all.interp)
test <- data_all %>% select(Tests, Week, Cases, Week)
test
View(test)
test <- data_all %>% select(Tests, Week, Cases) %>%
mutate("Week2" = Week)
View(test)
test <- data_all %>% select(Tests, Week, Cases) %>%
mutate("Week2" = Week) %>%
relocate(Week2, .before=Cases)
test <- data_all %>% select(Week,Test) %>%
mutate("Week2" = Week) %>%
select(Cases)
test <- data_all %>% select(Week,Tests) %>%
mutate("Week2" = Week) %>%
select(Cases)
test <- data_all %>% select(Week,Tests) %>%
mutate("Week2" = Week) %>%
select(data_all$Cases)
test <- data_all %>% select(Week,Tests)
test <- data_all %>% select(Week,Tests) %>%
mutate("Week2" = Week) %>%
select(data_all$Cases)
test <- data_all %>% select(Week,Tests,Cases) %>%
mutate("Week2" = Week) %>%
select(-Cases,Cases)
data_all.interp <- bind_rows(data_all.interp,test)
names(data_all.interp)
data_all.interp <- data_all %>%
map_df(~data.frame(tests = approx(data_all$Week, data_all$Tests, n = 80),
cases = approx(data_all$Week, data_all$Cases, n = 80)))
names(data_all.interp)
rename_all(function(e){return {names(data_all.interp)}})
test <- data_all %>% select(Week,Tests,Cases) %>%
mutate("Week2" = Week) %>%
select(-Cases,Cases) %>%
rename_all(function(e){return (names(data_all.interp))})
data_all.interp <- bind_rows(data_all.interp,test)
test <- data_all %>% select(Week,Tests,Cases) %>%
mutate("Week2" = Week) %>%
select(-Cases,Cases) %>%
rename_all(function(e){return (names(data_all.interp))}) %>%
arrange(tests.x)
{tests_vs_cases <- ggplot(data=data_all, aes(x=Week, group = 1, ) ) +
geom_line(aes(y=Cases)) + geom_text(aes(label=Cases, y=Cases),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Cases)) +
geom_line(aes(y=Tests/coeff), col="firebrick3") + geom_text(aes(label=Tests, y=Tests/coeff),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Tests/coeff), col = "firebrick3") +
scale_y_continuous(name = "Cases",sec.axis = sec_axis( trans=~.*coeff, name="Tests")) +
geom_ribbon(data=data_all.interp, aes(x = tests.x, ymin = cases.y, ymax = pmin(cases.y, tests.y/coeff), fill = paste("Less than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
geom_ribbon(data=data_all.interp, aes(x = cases.x, ymin = tests.y/coeff, ymax = pmin(cases.y, tests.y/coeff), fill = paste("More than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
labs(fill = "Positiv test procentage") +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(data_all[,1]))) +
scale_fill_manual(values=c("firebrick3", "#009E73"), name="fill")
tests_vs_cases}
data_all.interp <- bind_rows(data_all.interp,test) %>%
arrange(tests.x)
{tests_vs_cases <- ggplot(data=data_all, aes(x=Week, group = 1, ) ) +
geom_line(aes(y=Cases)) + geom_text(aes(label=Cases, y=Cases),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Cases)) +
geom_line(aes(y=Tests/coeff), col="firebrick3") + geom_text(aes(label=Tests, y=Tests/coeff),hjust=0.6, vjust=-0.6) + geom_point(aes(y=Tests/coeff), col = "firebrick3") +
scale_y_continuous(name = "Cases",sec.axis = sec_axis( trans=~.*coeff, name="Tests")) +
geom_ribbon(data=data_all.interp, aes(x = tests.x, ymin = cases.y, ymax = pmin(cases.y, tests.y/coeff), fill = paste("Less than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
geom_ribbon(data=data_all.interp, aes(x = cases.x, ymin = tests.y/coeff, ymax = pmin(cases.y, tests.y/coeff), fill = paste("More than ",1/coeff*100,"%", sep = "")), alpha=0.5) +
labs(fill = "Positiv test procentage") +
scale_x_continuous(breaks = scales::pretty_breaks(n = length(data_all[,1]))) +
scale_fill_manual(values=c("firebrick3", "#009E73"), name="fill")
tests_vs_cases}
