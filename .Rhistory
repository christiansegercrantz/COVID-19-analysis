summary(test_model)
plot(test$dateRep,predict(test_model))
points(test$dateRep, test$cumulative_cases)
test <- try[-5:-1,]
test_model <- poly_model <- lm(cumulative_cases ~ poly(dateRep, 4), data=test)
test <- try[88:92,]
summary(test_model)
plot(test$dateRep,predict(test_model))
points(test$dateRep, test$cumulative_cases)
test <- try[80:92,]
test_model <- poly_model <- lm(cumulative_cases ~ poly(dateRep, 4), data=test)
summary(test_model)
plot(test$dateRep,predict(test_model))
points(test$dateRep, test$cumulative_cases)
plot(test$dateRep,predict(test_model))
plot(test$dateRep,predict(test_model)type= l)
plot(test$dateRep,predict(test_model), type= l)
plot(test$dateRep,predict(test_model), type= "l")
points(test$dateRep, test$cumulative_cases)
test <- try[85:92,]
test_model <- poly_model <- lm(cumulative_cases ~ poly(dateRep, 4), data=test)
summary(test_model)
plot(test$dateRep,predict(test_model), type= "l")
points(test$dateRep, test$cumulative_cases)
test <- try[-5,]
test <- try[1:-5,]
test <- try[length(try)-10:length(try),]
test_model <- poly_model <- lm(cumulative_cases ~ poly(dateRep, 4), data=test)
summary(test_model)
plot(test$dateRep,predict(test_model), type= "l")
points(test$dateRep, test$cumulative_cases)
length(try)
test <- try[length(try$dateRep)-10:length(try$dateRep),]
ength(try$dateRep)
length(try$dateRep)
length(try$dateRep)-10:length(try$dateRep)
length(try$dateRep)-10
length(try$dateRep)
test <- try[(length(try$dateRep)-10):length(try$dateRep),]
(length(try$dateRep)-10):length(try$dateRep)
test <- try[(length(try$dateRep)-10):length(try$dateRep),]
test <- try[(length(try$dateRep)-10):length(try$dateRep),]
test <- try[(length(try$dateRep)-10):length(try$dateRep),]
test_model <- poly_model <- lm(cumulative_cases ~ poly(dateRep, 4), data=test)
summary(test_model)
plot(test$dateRep,predict(test_model), type= "l")
points(test$dateRep, test$cumulative_cases)
test <- try[(length(try$dateRep)-5):length(try$dateRep),]
test_model <- poly_model <- lm(cumulative_cases ~ poly(dateRep, 4), data=test)
summary(test_model)
plot(test$dateRep,predict(test_model), type= "l")
points(test$dateRep, test$cumulative_cases)
test <- try[(length(try$dateRep)-4):length(try$dateRep),]
test_model <- poly_model <- lm(cumulative_cases ~ poly(dateRep, 4), data=test)
summary(test_model)
plot(test$dateRep,predict(test_model), type= "l")
points(test$dateRep, test$cumulative_cases)
plot(test$dateRep,predict(test_model), type= "l")
points(test$dateRep, test$cumulative_cases)
test_model$rank
summary(test_model)
death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)
model <- lm(cumulative_cases ~ poly(dateRep, 4), data=data)
View(model)
summary(model)
predict(model)
predict(model, x = 1)
predict(model, newdata = 1)
mod <- lm(interlocks ~ log(assets), data=Ornstein)
newd <- data.frame(assets=exp(4:12))
(p1 <- predict(mod, newd, interval="prediction"))
p2 <- Predict(mod, newd, interval="prediction", vcov.=vcov)
all.equal(p1, p2) # the same
(predict(mod, newd, se=TRUE))
(p3 <- Predict(mod, newd, se=TRUE, vcov.=hccm)) # larger SEs
p4 <- Predict(mod, newd, se=TRUE, vcov.=hccm(mod, type="hc3"))
all.equal(p3, p4) # the same
# }
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
#Todays data
data_today <- filter(data, dateRep == (Sys.Date()-1)  & cumulative_cases >10)
#Change country data
country <-  c("Finland")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country)
countries_data <- filter(data, countriesAndTerritories %in% countries)
### Plot the new cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cases)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
theme_minimal() +
xlab("Date") + ylab("New cases / day")
ggplotly(new_cases_country_plot)}
###
### Plot the cumulative cases of the country
{cum_cases_country_plot <- ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cumulative_cases, group=1)) +
geom_line(linetype = "dashed")+
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
geom_point()
ggplotly(cum_cases_country_plot)}
###
### Polynomial fitting
poly_model <- lm(`cumulative cases` ~ poly(dateRep, 4), data=country_data)
summary(poly_model)
#Plot the fit
{ plot(country_data$dateRep,country_data$cumulative_cases)
points(country_data$dateRep, predict(poly_model), type= 'l', col="red")
future <- data.frame(dateRep = as.Date(tail(country_data$dateRep,1))+c(1,2,3,4,5,6,7))
plot(future, predict(poly_model, future), type= 'l', col="orange")
}
### Scatter plot of death rate
death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, label = countriesAndTerritories)) +
geom_point(size=2) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode),position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10')
ggplotly(death_rate_sct)
###Death rate for specified countries
death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)
poly_est <- function(data){
model <- lm(cumulative_cases ~ poly(dateRep, 4), data=data)
}
model <- lm(cumulative_cases ~ poly(dateRep, 4), data=country_data)
summary(model)
model2 <- lm(cumulative_cases ~ poly(dateRep, 3), data=country_data)
model1 <- lm(cumulative_cases ~ poly(dateRep, 4), data=country_data)
anova(model1,model2)
future <- data.frame(dateRep = as.Date(tail(country_data$dateRep,1))+c(1))
View(future)
predict(model,predict(future))
model
model <- lm(cumulative_cases ~ dateRep + I(dateRep^2), data=country_data)
data <- data %>%
group_by(countriesAndTerritories) %>%
group_indices(data, countriesAndTerritories)
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
group_indices(data, countriesAndTerritories)
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
#Todays data
data_today <- filter(data, dateRep == (Sys.Date()-1)  & cumulative_cases >10)
#Change country data
country <-  c("Finland")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country)
countries_data <- filter(data, countriesAndTerritories %in% countries)
### Plot the new cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cases)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
theme_minimal() +
xlab("Date") + ylab("New cases / day")
ggplotly(new_cases_country_plot)}
###
### Plot the cumulative cases of the country
{cum_cases_country_plot <- ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cumulative_cases, group=1)) +
geom_line(linetype = "dashed")+
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
geom_point()
ggplotly(cum_cases_country_plot)}
###
### Polynomial fitting
poly_model <- lm(`cumulative cases` ~ poly(dateRep, 4), data=country_data)
summary(poly_model)
#Plot the fit
{ plot(country_data$dateRep,country_data$cumulative_cases)
points(country_data$dateRep, predict(poly_model), type= 'l', col="red")
future <- data.frame(dateRep = as.Date(tail(country_data$dateRep,1))+c(1,2,3,4,5,6,7))
plot(future, predict(poly_model, future), type= 'l', col="orange")
}
### Scatter plot of death rate
death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, label = countriesAndTerritories)) +
geom_point(size=2) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode),position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10')
ggplotly(death_rate_sct)
###Death rate for specified countries
death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)
poly_est <- function(data){
model <- lm(cumulative_cases ~ dateRep + I(dateRep^2), data=country_data)
}
summary(model)
future <- data.frame(dateRep = as.Date(tail(country_data$dateRep,1))+c(1))
predict(model,predict(future))
View(data)
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
group_indices(data, countriesAndTerritories) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
#Todays data
data_today <- filter(data, dateRep == (Sys.Date()-1)  & cumulative_cases >10)
#Change country data
country <-  c("Finland")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country)
countries_data <- filter(data, countriesAndTerritories %in% countries)
### Plot the new cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cases)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
theme_minimal() +
xlab("Date") + ylab("New cases / day")
ggplotly(new_cases_country_plot)}
###
### Plot the cumulative cases of the country
{cum_cases_country_plot <- ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cumulative_cases, group=1)) +
geom_line(linetype = "dashed")+
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
geom_point()
ggplotly(cum_cases_country_plot)}
###
### Polynomial fitting
poly_model <- lm(`cumulative cases` ~ poly(dateRep, 4), data=country_data)
summary(poly_model)
#Plot the fit
{ plot(country_data$dateRep,country_data$cumulative_cases)
points(country_data$dateRep, predict(poly_model), type= 'l', col="red")
future <- data.frame(dateRep = as.Date(tail(country_data$dateRep,1))+c(1,2,3,4,5,6,7))
plot(future, predict(poly_model, future), type= 'l', col="orange")
}
### Scatter plot of death rate
death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, label = countriesAndTerritories)) +
geom_point(size=2) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode),position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10')
ggplotly(death_rate_sct)
###Death rate for specified countries
death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)
poly_est <- function(data){
model <- lm(cumulative_cases ~ dateRep + I(dateRep^2), data=country_data)
}
summary(model)
future <- data.frame(dateRep = as.Date(tail(country_data$dateRep,1))+c(1))
predict(model,predict(future))
View(data)
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
group_indices(data, countriesAndTerritories) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_indices(data, countriesAndTerritories) %>%
group_by(countriesAndTerritories) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
#group_indices(data, countriesAndTerritories) %>%
group_by(countriesAndTerritories) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("index" = row_number())
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
View(data)
rm(list = ls())
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
data <- data.frame(read_excel("data.xlsx"))
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data$dateRep <- as.Date(data$dateRep)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
ungroup()
#Todays data
data_today <- filter(data, dateRep == (Sys.Date()-1)  & cumulative_cases >10)
#Change country data
country <-  c("Finland")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country)
countries_data <- filter(data, countriesAndTerritories %in% countries)
### Plot the new cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cases)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
theme_minimal() +
xlab("Date") + ylab("New cases / day")
ggplotly(new_cases_country_plot)}
###
### Plot the cumulative cases of the country
{cum_cases_country_plot <- ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cumulative_cases, group=1)) +
geom_line(linetype = "dashed")+
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
geom_point()
ggplotly(cum_cases_country_plot)}
###
### Polynomial fitting
poly_model <- lm(`cumulative cases` ~ poly(dateRep, 4), data=country_data)
summary(poly_model)
#Plot the fit
{ plot(country_data$dateRep,country_data$cumulative_cases)
points(country_data$dateRep, predict(poly_model), type= 'l', col="red")
future <- data.frame(dateRep = as.Date(tail(country_data$dateRep,1))+c(1,2,3,4,5,6,7))
plot(future, predict(poly_model, future), type= 'l', col="orange")
}
### Scatter plot of death rate
death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, label = countriesAndTerritories)) +
geom_point(size=2) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode),position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10')
ggplotly(death_rate_sct)
###Death rate for specified countries
death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)
poly_est <- function(data){
model <- lm(cumulative_cases ~ dateRep + I(dateRep^2), data=country_data)
}
summary(model)
future <- data.frame(dateRep = as.Date(tail(country_data$dateRep,1))+c(1))
predict(model,predict(future))
model <- lm(cumulative_cases ~ index + I(index^2), data=country_data)
summary(model)
model <- lm(cumulative_cases ~ poly(index, 4, raw = TRUE), data=country_data)
summary(model)
future <- data.frame(index = tail(country_data$Index,1))+1)
future <- data.frame(index = tail(country_data$Index,1)+1)
future <- data.frame(index = tail(country_data$index,1)+1)
future
predict(model,predict(future))
model <- lm(cumulative_cases ~ I(index^4) +I(index^3) + I(index^2) + index, data=country_data)
summary(model)
future <- data.frame(index = tail(country_data$index,1)+1)
predict(model,predict(future))
predict(model,predict(newdata = future))
predict(model,predict(model ,newdata = future))
predict(model,newdata = future)
future <- data.frame(index = tail(country_data$index,1))
predict(model,newdata = future)
View(country_data)
model <- lm(cumulative_cases ~ poly(index, 4, raw = TRUE), data=country_data)
predict(model,newdata = future)
data <- data %>%
group_by(countriesAndTerritories) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cases/10^6)) %>%
mutate("deaths_per_100k" = (deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
mutate("growthrate" = rollify(poly_est, window = 7))%>%
ungroup()
install.packages("rollify")
install.packages("rollify")
