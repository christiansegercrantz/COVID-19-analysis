geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cases'!=0),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
lm(y ~ poly(x, 6, raw = TRUE))
poly_est <- function(y){
x <- 1:length(y)
lm(y ~ poly(x, 6, raw = TRUE))
}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
poly_est <- function(y){
x <- 1:length(y)
lm(y ~ poly(x, 4, raw = TRUE))
}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 100),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
#Change country data
country <-  c("Sweden")
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_deaths)) + geom_line(aes(y=cumulative_deaths),linetype = "dashed")
ggplotly(new_cases_country_plot)}
+ scale_y_continuous(trans='log10')
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_deaths)) + geom_line(aes(y=cumulative_deaths),linetype = "dashed") +
scale_y_continuous(trans='log10')
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed") +
scale_y_continuous(trans='log10')
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_bar(stat="identity", fill="steelblue") +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_bar(aes(y=real_cases),stat="identity", fill="steelblue") +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_bar(aes(y=real_cases),stat="identity", fill="steelblue", opacity=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_bar(aes(y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(exp_est(real_cases)))) +
geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=exp_est(real_cases))) +
geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
exp_est <- function(y){
tryCatch({
x <- 1:length(y)
exp  <- lm(log(y) ~ x)
exp$coefficients[["x"]]
exp
}, error = function(e){return(NaN)})
}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(exp_est(real_cases)))) +
geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
exp_est <- function(y){
tryCatch({
x <- 1:length(y)
exp  <- lm(log(y) ~ x)
#exp$coefficients[["x"]]
}, error = function(e){return(NaN)})
}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(exp_est(real_cases)))) +
geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
exp_est(country_Data$real_cases)
exp_est(real_cases)
country_data$real_cases
exp_est(country_data$real_cases)
exp_est(country_data$real_cases)
exp_est <- function(y){
tryCatch({
x <- 1:length(y)
exp  <- lm(log(y) ~ x)
exp$coefficients[["x"]]
}, error = function(e){return(NaN)})
}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
tabel(data$countriesAndTerritories)
table(data$countriesAndTerritories)
#Change country data
country <-  c("United_States_of_America")
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
#geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
#geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
### Plot the real cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases' > 10),], aes(x=dateRep, y=predict(poly_est(real_cases)))) +
geom_bar(aes(x=dateRep, y=real_cases),stat="identity", fill="steelblue", alpha=0.5) +
geom_point(stat="identity", col="steelblue") + geom_line(linetype = "dashed", col="steelblue") +
#geom_text(aes(label=real_cases), position = position_nudge(y = 500), size=3.5) +
theme_minimal() +
xlab("Date") + ylab("Predicted real cases vs reported cases") +
geom_point(aes(y=cumulative_cases)) + geom_line(aes(y=cumulative_cases),linetype = "dashed")
ggplotly(new_cases_country_plot)}
###Death rate for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_deaths'!=0),], aes(dateRep, cases_per_100k, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Deaths/100k")
ggplotly(death_rate)}
###Death rate for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, cases_per_100k, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Deaths/100k")
ggplotly(death_rate)}
rm(list = ls())
setwd("~/GitHub/COVID-19-analysis")
#install.packages("readxl","dplyr","plotly","tidyverse","htmlwidgets","countrycode","gganimate","tibbletime","remotes","utils")
library("readxl")
library("dplyr")
library("ggplot2")
library("plotly")
library("tidyverse")
library("htmlwidgets")
library("countrycode")
library("tibbletime")
library("remotes")
library("utils")
poly_est <- function(y){
x <- 1:length(y)
lm(y ~ poly(x, 4, raw = TRUE))
}
exp_est <- function(y){
tryCatch({
x <- 1:length(y)
exp  <- lm(log(y) ~ x)
exp$coefficients[["x"]]
}, error = function(e){return(NaN)})
}
roll_exp_est <- rollify(exp_est, window= 7, unlist = TRUE)
theme_set(
theme_minimal() +
theme(legend.position = "right")
)
#data <- data.frame(read_excel("data.xlsx"))
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
data$dateRep <- as.Date(data$dateRep, format = "%d/%m/%Y")
data <- data[order(data$countriesAndTerritories, data$dateRep),]
data <- data %>%
group_by(countriesAndTerritories) %>%
filter(n()>7) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cumulative_cases/10^6)) %>%
mutate("deaths_per_100k" = (cumulative_deaths/10^6)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
mutate("real_cases" = (lag(cumulative_deaths,10)/0.01)*2^(10/5)) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(cumulative_cases))) %>%
mutate("continent" = countrycode(sourcevar = countriesAndTerritories,
origin = "country.name",
destination = "continent"))%>%
ungroup()
#data %>% relocate(continent, .before = "countriesAndTerritories")
#data <- data %>%
#  group_by(countriesAndTerritories) %>%
#  mutate("real_cases" = cumsum(real_cases)) %>%
#  ungroup()
#Todays data
data_today <- filter(data, dateRep == (Sys.Date())  & cumulative_cases >10)
#Change country data
country <-  c("United_States_of_America")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
countries_data <- filter(data, countriesAndTerritories %in% countries)
europe <- filter(data, continent == "Europe")
### Plot the new cases of the country
{new_cases_country_plot<-ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cases)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=cases), vjust=-0.3, size=3.5) +
theme_minimal() +
xlab("Date") + ylab("New cases / day")
ggplotly(new_cases_country_plot)}
###
### Plot the cumulative cases of the country
{cum_cases_country_plot <- ggplot(data=country_data[which(country_data$'cumulative_cases'!=0),], aes(x=dateRep, y=cumulative_cases, group=1)) +
geom_line(linetype = "dashed")+
geom_text(aes(label=cases), position = position_nudge(y = 2, x= -2), size=3.5) +
geom_point(size = 1)
ggplotly(cum_cases_country_plot)}
###
### Polynomial fitting
{poly_model <- lm(cumulative_cases ~ poly(index, 4), data=country_data)
#summary(poly_model)
future <- data.frame(index = tail(country_data$index,1)+c(0,1,2,3,4,5,6,7))
poly_model_fit <- predict(poly_model, future, se.fit = TRUE)
future$predictions <- poly_model_fit$fit
future$lwr <- poly_model_fit$fit-1.99*poly_model_fit$se.fit
future$upr <- poly_model_fit$fit+1.99*poly_model_fit$se.fit
#Plot the fit
polynomfit_plot <- ggplot(country_data, aes(index,cumulative_cases))+
geom_point(size=0.7) +
geom_line() +
geom_point(data=future, aes(index, predictions, col="red"), size=0.7)+
geom_line(data=future, aes(index, predictions, col="red")) +
xlab("Indices") + ylab("Cumulative Cases") +
geom_ribbon(data=future, aes(x=index, y=predictions,  ymin=lwr, ymax=upr), alpha = 0.3, inherit.aes = FALSE)
ggplotly(polynomfit_plot)}
###
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = deaths_per_100k)) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
###
###Death rate for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, cases_per_100k, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Deaths/100k")
ggplotly(death_rate)}
10^6
10*10*10*10*10*10
100000
data <- data %>%
group_by(countriesAndTerritories) %>%
filter(n()>7) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cumulative_cases/10^5)) %>%
mutate("deaths_per_100k" = (cumulative_deaths/10^5)) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
mutate("real_cases" = (lag(cumulative_deaths,10)/0.01)*2^(10/5)) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(cumulative_cases))) %>%
mutate("continent" = countrycode(sourcevar = countriesAndTerritories,
origin = "country.name",
destination = "continent"))%>%
ungroup()
#Todays data
data_today <- filter(data, dateRep == (Sys.Date())  & cumulative_cases >10)
#Change country data
country <-  c("United_States_of_America")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
countries_data <- filter(data, countriesAndTerritories %in% countries)
europe <- filter(data, continent == "Europe")
###Death rate for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, cases_per_100k, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Deaths/100k")
ggplotly(death_rate)}
country_data$popData2018[1]
#Change country data
country <-  c("Finland")
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
5518050
5518050/(10^5)
0,6*55
0.6*55
data <- data %>%
group_by(countriesAndTerritories) %>%
filter(n()>7) %>%
mutate("index" = row_number()) %>%
mutate("cumulative_cases" = cumsum(cases)) %>%
mutate("cumulative_deaths" = cumsum(deaths)) %>%
mutate("cases_per_100k" = (cumulative_cases/(popData2018/10^5))) %>%
mutate("deaths_per_100k" = (cumulative_deaths/(popData2018/10^5))) %>%
mutate("death_procentage_of_cases" = cumulative_deaths/cumulative_cases * 100) %>%
mutate("real_cases" = (lag(cumulative_deaths,10)/0.01)*2^(10/5)) %>%
mutate("doubling_time" =  log(2)/(roll_exp_est(cumulative_cases))) %>%
mutate("continent" = countrycode(sourcevar = countriesAndTerritories,
origin = "country.name",
destination = "continent"))%>%
ungroup()
#Todays data
data_today <- filter(data, dateRep == (Sys.Date())  & cumulative_cases >10)
#Change country data
country <-  c("Finland")
countries <- c("Finland", "Sweden", "Norway", "Denmark")
country_data <- filter(data, countriesAndTerritories == country & cumulative_cases != 0)
countries_data <- filter(data, countriesAndTerritories %in% countries)
europe <- filter(data, continent == "Europe")
###Cumulative cases for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_cases'!=0),], aes(dateRep, cases_per_100k, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Cases/100k")
ggplotly(death_rate)}
###Death rate for specified countries
{death_rate <-
ggplot(countries_data[which(countries_data$'cumulative_deaths'!=0),], aes(dateRep, death_procentage_of_cases, group = countriesAndTerritories, color = countriesAndTerritories )) +
geom_line() +
geom_point(size = 0.5) +
xlab("Date") + ylab("Death % of cases")
ggplotly(death_rate)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today, aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = deaths_per_100k)) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today[which(data_today$popData2018 > 10^6)], aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = deaths_per_100k)) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today[which(data_today$popData2018 > 10^6),], aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = deaths_per_100k)) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
#Todays data
data_today <- filter(europe, dateRep == (Sys.Date())  & cumulative_cases >10)
### Scatter plot of death rate
{death_rate_sct <- ggplot(data_today[which(data_today$popData2018 > 10^6),], aes(cases_per_100k, death_procentage_of_cases, frame = dateRep, label = countriesAndTerritories, color = deaths_per_100k)) +
geom_point(size=1 ) +
xlab("Caseas/100k") + ylab("Death % of cases") +
geom_text(aes(label=countryterritoryCode), position = position_nudge(y = 0.7)) +
scale_x_continuous(trans='log10') +
scale_color_gradient(low="blue", high="red") + theme(legend.position = "none")
ggplotly(death_rate_sct)}
library(rjson)
test <- fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
data$features[[1]]
install.packages("rjson")
library("")
test <- fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
data$features[[1]]
library("rjson")
test <- fromJSON(file="https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json")
data$features[[1]]
test
View(test)
View(test)
